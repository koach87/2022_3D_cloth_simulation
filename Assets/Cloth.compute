#include "GPUCollision.cginc"
#pragma kernel UpdateForce
#pragma kernel UpdatePosition

float dt;

RWStructuredBuffer<uint> pin;
RWStructuredBuffer<float3> x;
RWStructuredBuffer<float3> v;
RWStructuredBuffer<float3> f;
RWStructuredBuffer<float3> color;
uint nParticals;

struct Spring
{
    float kd;
    float ks;
    float r;
};
RWStructuredBuffer<Spring> springs; // nParticals x nParticals
uint nSprings;
float3 spherePos;
float3 lastSpherePos;


/* Gets the force on node A by the spring AB. */
float3 GetSpringForce(uint a, uint b) {
    float ks = springs[a * nParticals + b].ks;
    float kd = springs[a * nParticals + b].kd;
    float r = springs[a * nParticals + b].r;

	float3 xi = x[a];
	float3 xj = x[b];
	float3 xij = xi - xj;

	float3 vi = v[a];
	float3 vj = v[b];

	if (length(xi - xj) < 0.00001) {
		return float3(0,0,0);
	}
	float3 springForce = ks * (1 - r / length(xij)) * xij;
	float3 dampingForce = kd * (vi - vj);
    return springForce + dampingForce;

}


// KERNEL

[numthreads(256, 1, 1)]
void UpdateForce (uint3 id : SV_DispatchThreadID) {
    if (id.x < nParticals) {
        f[id.x] = 0;
        for (uint i = 0; i < nParticals; i++) {
            if (springs[id.x * nParticals + i].r > 0) {
                f[id.x] -= GetSpringForce(id.x, i);
            } 
        }
    }
}

[numthreads(256, 1, 1)]
void UpdatePosition (uint3 id : SV_DispatchThreadID) {
    float3 g = float3(0, -9.81, 0);
    if (id.x < nParticals && pin[id.x] == 0) {
        color[id.x] = color[id.x] * 0.998;
        Ray r;
        r.origin = x[id.x];
        float3 oldX = x[id.x];
        float3 a = g + f[id.x] / 1;
        v[id.x] += a * dt;
        x[id.x] += v[id.x] * dt;

        r.direction = (v[id.x] * dt) * 0.05;

        SphereCollider sphere;
        sphere.center = spherePos;
        sphere.radius = 20.0;
        Hit h = RaySphereCollision(r, sphere);
        if (h.collision) {
            x[id.x] = h.hitPoint;
            v[id.x] = 0.2 * Reflect(v[id.x], h.hitNormal);
            color[id.x] = float3(1, 1, 1);
            // lastSpherePos = spherePos;
        }
        // else {
        //     r.direction = lastSpherePos - spherePos;
        //     if (length(r.direction) > 0.01) {
        //         h = RaySphereCollision(r, sphere);
        //         if (h.collision) {
        //             x[id.x] = h.hitPoint;
        //             v[id.x] = 0.2 * Reflect(v[id.x], h.hitNormal);
        //             // v[id.x] = 0;
        //             color[id.x] = float3(1, 1, 1);
        //         }
        //         lastSpherePos = spherePos;
        //     }
        // }

    }
}